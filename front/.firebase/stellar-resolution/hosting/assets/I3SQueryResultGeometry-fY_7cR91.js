import{bI as p,bJ as c,fx as u}from"./index-BCRx-hwS.js";import{createMesh as l}from"./meshUtils-COBzSrnH.js";import"./Mesh-C5T4l64r.js";import"./MeshComponent-BUof5-er.js";import"./meshProperties-B4vupnXI.js";import"./MeshTransform-Bkvl_5_R.js";import"./MeshVertexAttributes-4FAN0hBT.js";import"./triangulationUtils-Di5oVG4z.js";import"./deduplicate-CPLnnGyZ.js";import"./vertexSpaceConversion-BKC4x7ti.js";import"./vec4-BRgLhUdR.js";import"./External-XW8koj7M.js";function S(i,o){const n=new Array,a=p.fromJSON(o.spatialReference);for(const e of o.features){const t=e.metadata,r=c(e.geometry);if(!t||!r){n.push(null);continue}r.spatialReference=a;const s=r.extent,f=l({layerView:i,nodeIndex:t.meta.node.index,featureIndex:t.index,extent:s,spatialReference:a});n.push(f),e.geometry=null}const m=u.fromJSON(o);for(let e=0;e<m.features.length;e++){const t=m.features[e],r=n[e];t.geometry=r}return m}export{S as processQueryGeometries};
