const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-CHxhkuUh.js","assets/utils-C2hH2CIY.js","assets/index-BCRx-hwS.js","assets/index-BR8bGno3.css","assets/originUtils-C927yeai.js","assets/jsonContext-CZOU-fVF.js","assets/saveUtils-DPUBwTXc.js"])))=>i.map(i=>d[i]);
import{hb as _,hJ as E,hf as P,hK as T,hL as A,ht as L,hd as M,he as R,hg as F,hc as N,hv as j,hu as V,aE as J,ep as q,bX as U,hG as x,ho as f,hM as I,hN as k,fE as z,hO as G,b1 as v,bN as W,ak as D,hq as H,hr as g,hP as K,s as w,Y as Z,a0 as B,_ as C,r as s,m as n,hQ as O,h1 as Q,c$ as X,h3 as Y,b as ee,hR as te,hS as re}from"./index-BCRx-hwS.js";import{y as ae}from"./ExportImageParameters-DYGEAiMW.js";import"./floorFilterUtils-DZ5C6FQv.js";let a=class extends _(E(P(T(A(L(M(R(F(N(j(V(B)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new ae({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new J({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=q(async(r,l,t)=>{const{save:i,saveAs:o}=await C(()=>import("./mapImageLayerUtils-CHxhkuUh.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(r){case g.SAVE:return i(this,l);case g.SAVE_AS:return o(this,t,l)}})}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(U).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,t){var y,b,S;if(!this.loaded||!e)return;const i=e.slice().reverse().flatten(({sublayers:p})=>p&&p.toArray().reverse()).toArray();let o=!1;const u=x(t.origin);let c;if((y=this.capabilities)!=null&&y.operations.supportsExportMap&&((S=(b=this.capabilities)==null?void 0:b.exportMap)!=null&&S.supportsDynamicLayers)){if(u===f.PORTAL_ITEM){const p=this.createSublayersForOrigin("service").sublayers;o=I(i,p,f.SERVICE)}else if(u>f.PORTAL_ITEM){const p=this.createSublayersForOrigin("portal-item");o=I(i,p.sublayers,x(p.origin)),c=p.originWithPartialOverrides}}const m=[],d={writeSublayerStructure:o,...t,minimumWritableOrigin:c};let h=o||this.hasVisibleLayersForOrigin(u);i.forEach(p=>{const $=p.write({},d);m.push($),h=h||p.originOf("visible")==="user"}),m.some(p=>Object.keys(p).length>1)&&(r.layers=m),h&&(r.visibleLayers=i.filter(p=>p.visible).map(p=>p.id))}createExportImageParameters(e,r,l,t){const i=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=k({extent:e,width:r})*i;const o=this._exportImageParameters.toJSON(),u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,m=z(c);o.dpi*=i;const d={};if(t!=null&&t.timeExtent){const{start:h,end:y}=t.timeExtent.toJSON();d.time=h&&y&&h===y?""+h:`${h??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:m,imageSR:m,size:r+","+l,...o,...u,...d}}async fetchImage(e,r,l,t){const{data:i}=await this._fetchImage("image",e,r,l,t);return i}async fetchImageBitmap(e,r,l,t){const{data:i,url:o}=await this._fetchImage("blob",e,r,l,t);return G(i,o,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await v(this.url,r),{extent:t,fullExtent:i,timeExtent:o}=l,u=t||i;return{fullExtent:u&&D.fromJSON(u),timeExtent:o&&W.fromJSON({start:o[0],end:o[1]})}}loadAll(){return H(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(g.SAVE,e)}async saveAs(e,r){return this._debouncedSaveOperations(g.SAVE_AS,r,e)}serviceSupportsSpatialReference(e){return K(this,e)}async _fetchImage(e,r,l,t,i){var c,m,d;const o={responseType:e,signal:(i==null?void 0:i.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,t,i),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},u=this.parsedUrl.path+"/export";if(((c=o.query)==null?void 0:c.dynamicLayers)!=null&&!((d=(m=this.capabilities)==null?void 0:m.exportMap)!=null&&d.supportsDynamicLayers))throw new w("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await v(u,o);return{data:h,url:u}}catch(h){throw Z(h)?h:new w("mapimagelayer:image-fetch-error",`Unable to load image: ${u}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await v(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};s([n(O("dateFieldsTimeReference"))],a.prototype,"dateFieldsTimeZone",void 0),s([n({type:Boolean})],a.prototype,"datesInUnknownTimezone",void 0),s([n()],a.prototype,"dpi",void 0),s([n()],a.prototype,"elevationInfo",void 0),s([n()],a.prototype,"gdbVersion",void 0),s([n()],a.prototype,"imageFormat",void 0),s([Q("imageFormat",["supportedImageFormatTypes"])],a.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],a.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],a.prototype,"imageMaxWidth",void 0),s([n()],a.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],a.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],a.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],a.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],a.prototype,"popupEnabled",void 0),s([n(O("preferredTimeReference"))],a.prototype,"preferredTimeZone",void 0),s([n()],a.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],a.prototype,"sublayers",void 0),s([X("sublayers",{layers:{type:[re]},visibleLayers:{type:[te]}})],a.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],a.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],a.prototype,"type",void 0),s([n(Y)],a.prototype,"url",void 0),a=s([ee("esri.layers.MapImageLayer")],a);const ne=a;export{ne as default};
