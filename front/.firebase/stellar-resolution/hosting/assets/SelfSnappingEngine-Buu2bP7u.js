import{fg as _,l4 as f,rW as y,l8 as x,ek as v,dp as W,rX as D,fc as g,rY as M,iu as F,oM as b,fP as X,au as k,rZ as R,r_ as Y,r$ as G,s0 as H,s1 as z,rN as A,s2 as B,s3 as K,s4 as q,kw as Z,aT as N,ix as I,s5 as Q,s6 as T,fb as J,s7 as ee,s8 as te,s9 as se,eS as ie,l5 as re,l7 as ne,l6 as oe,ed as ae,at as he,sa as le,sb as de,sc as ce,c as pe,V as ge,l2 as fe,iE as ue,r as L,m as $,b as xe}from"./index-BCRx-hwS.js";class C{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=_.shortLineThreshold*_.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||y(x(e,t,v,this.view),x(s,t,v,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=W(t);return D(g(s),g(e))*i<_.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class ve extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=x(s,n,v,this.view),{view:o}=this,h=t.edges[i-1];let l=h;do{if(this.edgeExceedsShortLineThreshold(l,e)){const c=M(l,o,e);this._processCandidateProposal(c.left,c.right,s,a,e,r)}l=l.leftVertex.leftEdge}while(l&&l!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=x(s,a,v,n),h=i.leftEdge,l=i.rightEdge;h&&l&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(l,e)&&this._processCandidateProposal(f(h.leftVertex.pos,n,e),f(l.rightVertex.pos,n,e),s,o,e,t);const c=r.edges[0];let p=c;do{if(p!==i.leftEdge&&p!==i.rightEdge&&this.edgeExceedsShortLineThreshold(p,e)){const u=M(p,n,e);this._processCandidateProposal(u.left,u.right,s,o,e,t)}p=p.rightVertex.rightEdge}while(p&&p!==c);return t}_processCandidateProposal(s,e,t,i,r,n){var c;const{spatialReference:a,pointer:o}=r,h=k();Ee(h,s,e,t,r,this._geodesicLengthMeasurementUtils);const l=F(b(h));y(i,x(l,a,v,this.view))<this.squaredProximityThreshold(o)&&n.push(new X({lineStart:s,lineEnd:e,targetPoint:l,isDraped:((c=r.elevationInfo)==null?void 0:c.mode)==="on-the-ground"}))}}function Ee(d,s,e,t,i,r){me(d,s,e,t,i,r)||we(d,t,s,e)}function me(d,s,e,t,{spatialReference:i},r){const n=R(s,e,i,i);if(n==null)return!1;const a=R(e,t,i,i);if(a==null)return!1;const o=r.geodesicDistance(e,t,i);if(o==null)return!1;const h=Math.abs(Y.shortestSignedDiff(n,a))>Math.PI/2?G.normalize(n+Math.PI):n;return H(d,e,i,z(o,"meters"),A(h,"radians","geographic"),"geodesic"),d[2]=t[2],!0}function we(d,s,e,t){B(s,{start:e,end:t,type:K.LINE},d),d[2]=s[2]}let Ve=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=x(s,e.spatialReference,v,a),h=f(t.vertices[r-1].pos,a,e),l=f(t.vertices[0].pos,a,e),c=t.edges[i-1];let p=c;do{if(this.edgeExceedsShortLineThreshold(p,e)){const u=M(p,a,e);this._checkEdgeForParallelLines(u,h,s,o,e,n),this._checkEdgeForParallelLines(u,l,s,o,e,n)}p=p.leftVertex.leftEdge}while(p&&p!==c);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=x(s,e.spatialReference,v,n),o=i.leftEdge,h=i.rightEdge,l=r.vertices[0],c=f(l.pos,n,e),p=r.vertices.length,u=r.vertices[p-1],V=f(u.pos,n,e),P=r.edges[0];let E=P;do{if(E!==o&&E!==h&&this.edgeExceedsShortLineThreshold(E,e)){const S=M(E,n,e);o&&this._checkEdgeForParallelLines(S,f(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(S,f(h.rightVertex.pos,n,e),s,a,e,t),i===l?this._checkEdgeForParallelLines(S,V,s,a,e,t):i===u&&this._checkEdgeForParallelLines(S,c,s,a,e,t)}E=E.rightVertex.rightEdge}while(E&&E!==P);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){var p;const a=s.left,o=s.right;if(q(m,g(e),g(a),g(o)),Z(m,g(e))<_.parallelLineThreshold)return;q(m,g(t),g(a),g(o),g(e));const{spatialReference:h,pointer:l}=r,c=F(I(m[0],m[1],t[2]));if(y(i,x(c,h,v,this.view))<this.squaredProximityThreshold(l)){if(this.isVertical(c,e,r)||this.isVertical(a,o,r)||Le(s,n))return;n.push(new Q({referenceLine:s,lineStart:e,targetPoint:c,isDraped:((p=r.elevationInfo)==null?void 0:p.mode)==="on-the-ground"}))}}};function Le(d,s){const e=d.left,t=d.right;for(const i of s)if(q(m,g(t),g(i.constraint.start),g(i.constraint.end),g(e)),Z(m,g(t))<_.parallelLineThreshold)return i.addReferenceLine(d),!0;return!1}const m=N();class _e extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=x(s,e.spatialReference,v,r),a=t.vertices.at(-1);this._checkForSnappingCandidate(T.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate(T.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=x(s,e.spatialReference,v,r),a=i.leftEdge,o=i.rightEdge;if(a!=null&&a.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o!=null&&o.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,l=f(i.pos,h,o),c=f(r.pos,h,o);ye(O,c,l,n,o,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,c,l,O,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){var E;const{spatialReference:h,pointer:l}=o,c=J(j,g(n),g(i)),p=ee(r,c)/te(r),u=se(j,g(i),r,p),V=F(I(u[0],u[1],n[2]));if(y(a,x(V,h,v,this.view))>this.squaredProximityThreshold(l)||this.isVertical(V,i,o)||this.isVertical(i,t,o))return;const P=ie(k(),i,r,Math.sign(p));e.push(new re({targetPoint:V,constraint:new oe(i,b(P)),previousVertex:t,otherVertex:i,otherVertexType:ne.CENTER,selfSnappingType:s,isDraped:((E=o.elevationInfo)==null?void 0:E.mode)==="on-the-ground"}))}}function ye(d,s,e,t,i,r){Pe(d,s,e,t,i,r)||Se(d,s,e)}function Pe(d,s,e,t,{spatialReference:i},r){const n=R(s,e,i,i);if(n==null)return!1;const a=R(e,t,i,i);if(a==null)return!1;const o=Math.sign(G.shortestSignedDiff(n,a))*Math.PI*.5,h=A(n+o,"radians","geographic"),l=k(),c=r.geodesicDistance(e,t,i);return c!=null&&(H(l,e,i,z(c,"meters"),h,"geodesic"),ae(d,l,e),!0)}function Se(d,s,e){const t=J(j,g(e),g(s));he(d,t[1],-t[0],0)}const j=N(),O=k();let Te=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=f(a.pos,n,e),l=f(o.pos,n,e);return this._processCandidateProposal(h,l,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=f(i.leftEdge.leftVertex.pos,n,e),o=f(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){var u;if(!this.exceedsShortLineThreshold(s,e,i))return;const n=le(U,g(s),g(e),.5),a=.5*D(g(s),g(e)),o=de(U,g(t),n,a),h=F(I(o[0],o[1],t[2])),{spatialReference:l,pointer:c}=i,p=x(t,l,v,this.view);if(y(p,x(h,l,v,this.view))<this.squaredProximityThreshold(c)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new ce({targetPoint:h,point1:s,point2:e,isDraped:((u=i.elevationInfo)==null?void 0:u.mode)==="on-the-ground"}))}}};const U=N();let w=class extends pe{constructor(d){super(d),this.updating=!1,this._snappers=new ge,this._domain=fe.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new ve(this.view,this.options,this.geodesicLengthMeasurementUtils),new _e(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(d){this._set("options",d);for(const s of this._snappers)s.options=d}async fetchCandidates(d,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(d,e))t.push(r);return ue(d,t),t}};L([$({readOnly:!0})],w.prototype,"updating",void 0),L([$({constructOnly:!0})],w.prototype,"view",void 0),L([$({constructOnly:!0})],w.prototype,"geodesicLengthMeasurementUtils",void 0),L([$()],w.prototype,"options",null),w=L([xe("esri.views.interactive.snapping.SelfSnappingEngine")],w);export{w as SelfSnappingEngine};
