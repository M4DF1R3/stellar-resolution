import{c as z,H as O,I as S,J as u,K as L,M as P,V as x,N as j,O as A,Q as k,R as J,S as N,r as h,m as d,b as T}from"./index-BCRx-hwS.js";const E=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let r=class extends z{constructor(o){super(o),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._symbols=E.map(l=>new O({color:[l[0],l[1],l[2],.6],outline:{color:"black",width:1}})),this._enabled=!0}initialize(){this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(o){this._enabled!==o&&(this._enabled=o,this.update())}update(){if(!this._enabled)return void this.clear();const o=e=>{if(e.label!=null)return e.label;let s=e.lij.toString();return e.loadPriority!=null&&(s+=` (${e.loadPriority})`),e.measures&&(s+=`[${e.measures.lodLevel}]`),s},l=this.getTiles(),y=new Array,g=new Set((this._labels.size,this._labels.keys()));l.forEach((e,s)=>{var w;const t=e.lij.toString();g.delete(t);const M=((w=e.measures)==null?void 0:w.lodLevel)??e.level,p=e.geometry;if(this.enablePolygons&&!this._polygons.has(t)){const i=new S({geometry:p,symbol:this._symbols[M%this._symbols.length]});this._polygons.set(t,i),y.push(i)}if(this.enableLabels){const i=o(e),_=s/(l.length-1),c=L(0,200,_),m=L(20,6,_)/.75,v=e.loadPriority!=null&&e.loadPriority>=l.length,f=new u([c,v?0:c,v?0:c]),$=this.view.type==="3d"?()=>new P({verticalOffset:new A({screenLength:40/.75}),callout:new j({color:new u("white"),border:new J({color:new u("black")})}),symbolLayers:new x([new k({text:i,halo:{color:"white",size:1/.75},material:{color:f},size:m})])}):()=>new N({text:i,haloColor:"white",haloSize:1/.75,color:f,size:m}),n=this._labels.get(t);if(n){const a=$();n.symbol!=null&&JSON.stringify(a)===JSON.stringify(n.symbol)||(n.symbol=a)}else{const a=new S({geometry:p.extent.center,symbol:$()});this._labels.set(t,a),y.push(a)}}});const b=new Array;g.forEach(e=>{const s=this._polygons.get(e);s!=null&&(b.push(s),this._polygons.delete(e));const t=this._labels.get(e);t!=null&&(b.push(t),this._labels.delete(e))}),this.view.graphics.removeMany(b),this.view.graphics.addMany(y)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};h([d({constructOnly:!0})],r.prototype,"view",void 0),h([d({readOnly:!0})],r.prototype,"updating",void 0),h([d()],r.prototype,"enabled",null),r=h([T("esri.views.support.TileTreeDebugger")],r);export{r as d};
