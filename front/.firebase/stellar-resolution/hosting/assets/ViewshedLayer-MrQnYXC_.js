import{Z as L,a3 as T,V as q,jX as C,ma as F,eZ as _,ak as S,i as Z,cY as R,r as s,m as r,jY as k,b as H,eH as A,hd as D,hg as G,a0 as J,c$ as U}from"./index-BCRx-hwS.js";import{c as N}from"./Viewshed-D24zUyBi.js";import{l as X}from"./Analysis-DpSXmLGI.js";import"./featureReferenceUtils-B16s7UxU.js";const E=q.ofType(N);let l=class extends X{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(L(()=>this._computeExtent(),e=>{e.pending==null&&(this._extent=e.extent)},T))}get viewsheds(){return this._get("viewsheds")||new E}set viewsheds(e){this._set("viewsheds",C(e,this.viewsheds,E))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get valid(){return this.viewsheds.every(e=>e.valid)}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const o=this.viewsheds.filter(i=>i.observer!=null),p=o.map(i=>i.observer).toArray(),u=F(p,e);return u.pending!=null?{pending:u.pending,extent:null}:{pending:null,extent:u.geometries.map((i,h)=>{const g=o.at(h);return i!=null&&g!=null?this._computeViewshedExtent(this.viewsheds.at(h),i):null}).filter(i=>i!=null).reduce((i,h)=>B(i,h),null)}}_computeViewshedExtent(e,o){const{farDistance:p,heading:u,tilt:i,horizontalFieldOfView:h,verticalFieldOfView:g}=e,{spatialReference:f}=o,b=h/2,$=g/2,O=p/f.metersPerUnit,P=[_.normalize(u-b),u,_.normalize(u+b)],d=S.fromPoint(o),m=v=>{const c=P.map(a=>_.normalize(a-v));if(c[0]>c[2]||h===360)return O;const y=c.map(a=>Math.abs(a>180?360-a:a)).reduce((a,x)=>a>x?x:a);return y>90?0:O*Math.cos(R(y))};d.xmax+=m(90),d.xmin-=m(-90),d.ymax+=m(0),d.ymin-=m(180);const w=o.z;if(w!=null){let v=w,c=w;const y=i-90,a=A(y+$,-90,90),x=A(y-$,-90,90),V=f!=null&&f.isGeographic?p:O;v+=V*z(a),c+=V*z(x);const Y=j($)*V,M=z(y)*Y*(1-j(b));i<90&&(v-=M),i>90&&(c-=M),d.zmax=Math.max(v,w),d.zmin=Math.min(c,w)}return d}equals(e){return this===e||super.equals(e)&&Z(this.viewsheds.toArray(),e.viewsheds.toArray(),(o,p)=>o.equals(p))}clear(){this.viewsheds.removeAll()}};function B(t,e){return t==null?e:e==null?t:t.union(e)}function j(t){return Math.cos(R(t))}function z(t){return Math.sin(R(t))}s([r({type:["viewshed"]})],l.prototype,"type",void 0),s([r({cast:k,type:E,nonNullable:!0})],l.prototype,"viewsheds",null),s([r({readOnly:!0})],l.prototype,"spatialReference",null),s([r()],l.prototype,"_extent",void 0),s([r()],l.prototype,"extent",null),s([r({readOnly:!0})],l.prototype,"valid",null),l=s([H("esri.analysis.ViewshedAnalysis")],l);let n=class extends D(G(J)){constructor(t){super(t),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new l,this.opacity=1}initialize(){this.addHandles(L(()=>this.source,(t,e)=>{e!=null&&e.parent===this&&(e.parent=null),t!=null&&(t.parent=this)},T))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(t){this.source===t&&(this.source=new l)}get analysis(){return this.source}set analysis(t){this.source=t}get viewsheds(){return this.source.viewsheds}set viewsheds(t){this.source.viewsheds=t}writeViewsheds(t,e,o,p){e.viewsheds=t.filter(u=>u.valid).toJSON(p)}};s([r({json:{read:!1},readOnly:!0})],n.prototype,"type",void 0),s([r({type:["ViewshedLayer"]})],n.prototype,"operationalLayerType",void 0),s([r({type:l,nonNullable:!0})],n.prototype,"source",void 0),s([r({readOnly:!0})],n.prototype,"spatialReference",null),s([r({readOnly:!0})],n.prototype,"fullExtent",null),s([r({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],n.prototype,"opacity",void 0),s([r({type:["show","hide"]})],n.prototype,"listMode",void 0),s([r({type:q.ofType(N),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],n.prototype,"viewsheds",null),s([U("web-scene","viewsheds")],n.prototype,"writeViewsheds",null),n=s([H("esri.layers.ViewshedLayer")],n);const te=n;export{te as default};
