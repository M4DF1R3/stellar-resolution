import{bI as v,jR as O,jS as P,b2 as x,am as q,aD as E,jT as G,jU as U,au as W,jV as A,jW as B,c8 as H}from"./index-BCRx-hwS.js";async function N(t,d,l,p,o){const{elevationProvider:u,renderCoordsHelper:i}=t,{elevationInfo:f}=d,{pointsInFeatures:j,spatialReference:g}=p,h=v.fromJSON(g),y=O(f,!0),I=await P(y,h,o);x(o);const c=[],e=new Set,s=new Set,a=new E,n=q(0,0,0,v.WGS84),r=new B,S=W();n.spatialReference=h;const $=t.elevationProvider.spatialReference??t.spatialReference;for(const{objectId:m,points:w}of j){const b=l(m);if(b==null){for(const R of w)c.push(R.z??0);e.add(m);continue}b.isDraped&&s.add(m);const z=b.graphic.geometry;a.setFromElevationInfo(G(z,f)),a.updateFeatureExpressionInfoContext(I,b.graphic,d);for(const{x:R,y:C,z:F}of w)n.x=R,n.y=C,n.z=F??0,await U(n,S,$,0,{signal:o}),A(S,u,a,i,r),c.push(r.z)}return{elevations:c,drapedObjectIds:s,failedObjectIds:e}}async function T(t,d,l){if(t==null||d.candidates.length===0)return D;const p=t.graphics3DGraphicsByObjectID??t.graphics3DGraphics,o=[],u=[],{renderer:i}=t,f=i!=null&&"arcadeRequired"in i&&i.arcadeRequired?H():null,j=async(e,{graphic:s,graphics3DSymbol:a})=>{const n=await f,r=await t.getRenderingInfoAsync(s,i,n,{signal:l});return r==null?[]:a.queryForSnapping(e,h,r,l)},{candidates:g,spatialReference:h}=d;for(let e=0;e<g.length;++e){const s=g[e],{objectId:a}=s,n=typeof a=="number"?p==null?void 0:p.get(a):void 0;if(n==null)continue;const{graphics3DSymbol:r}=n;r.symbologySnappingSupported&&(o.push(j(s,n)),u.push(e))}if(o.length===0)return D;const y=await Promise.all(o);x(l);const I=[],c=[];for(let e=0;e<y.length;++e){const s=y[e],a=u[e];for(const n of s)I.push(n),c.push(a)}return{candidates:I,sourceCandidateIndices:c}}const D={candidates:[],sourceCandidateIndices:[]};export{N as l,T as r};
